typ List[T](head: T, tail: List)
fun get[T](ls: List[T], n: Int): Ref[T]{ls.head*.tail} = if n==0 then ls.head else get(ls.tail, n-1)


typ List[T](head: T, tail: List)
a = new List(1, new List(2, new List(3, nil)))
a.tail.head
a.tail.head <- 0
a
a.tail.tail.tail <- a
a



typ A(b: Int)
a = new A(42)
a.b <- 0






typ List[T](head: T, tail: List)
a = new List(1, new List(2, new List(3, nil)))
b = a.tail.tail
a.tail <- 0
a
b


typ List[T](head: T, tail: List)
a = new List(1, new List(2, new List(3, nil)))

b = a.tail.tail
a.tail <- 0
a
b


typ List[T](head: T, tail: List)
a = new List(1, new List(2, new List(3, nil)))
a.tail <- 0







b.head <- 0


